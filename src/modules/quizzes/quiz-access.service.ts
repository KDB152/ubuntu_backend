import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { In, Repository } from 'typeorm';
import { Quiz } from './entities/quiz.entity';
import { Student } from '../students/entities/student.entity';

@Injectable()
export class QuizAccessService {
  constructor(
    @InjectRepository(Quiz)
    private readonly quizRepo: Repository<Quiz>,
    @InjectRepository(Student)
    private readonly studentRepo: Repository<Student>,
  ) {}

  /**
   * V√©rifie si un √©tudiant peut tenter un quiz sp√©cifique
   */
  async canStudentTakeQuiz(quizId: number, studentId: number): Promise<boolean> {
    try {
      console.log(`üîç V√©rification d'acc√®s: Quiz ${quizId}, √âtudiant ${studentId}`);
      
      // R√©cup√©rer le quiz
      const quiz = await this.quizRepo.findOne({ where: { id: quizId } });
      if (!quiz) {
        console.log(`‚ùå Quiz ${quizId} non trouv√©`);
        return false;
      }
      
      console.log(`üìã Quiz trouv√©:`, {
        id: quiz.id,
        title: quiz.title,
        target_groups: quiz.target_groups,
        target_groups_type: typeof quiz.target_groups
      });

      // R√©cup√©rer l'√©tudiant
      const student = await this.studentRepo.findOne({ where: { id: studentId } });
      if (!student) {
        console.log(`‚ùå √âtudiant ${studentId} non trouv√©`);
        return false;
      }
      
      console.log(`üë§ √âtudiant trouv√©:`, {
        id: student.id,
        class_level: student.class_level,
        class_level_type: typeof student.class_level
      });

      // Si aucun groupe cible n'est sp√©cifi√©, tous les √©tudiants peuvent tenter le quiz
      if (!quiz.target_groups || quiz.target_groups.length === 0) {
        console.log(`‚úÖ Pas de restriction, acc√®s autoris√©`);
        return true;
      }

      // V√©rifier si l'√©tudiant appartient √† un des groupes cibles
      // target_groups peut √™tre un tableau ou une cha√Æne, il faut g√©rer les deux cas
      if (Array.isArray(quiz.target_groups)) {
        const hasAccess = quiz.target_groups.includes(student.class_level);
        console.log(`üîç V√©rification tableau: ${quiz.target_groups.includes(student.class_level)}`);
        console.log(`  target_groups: [${quiz.target_groups.join(', ')}]`);
        console.log(`  student.class_level: ${student.class_level}`);
        console.log(`  R√©sultat: ${hasAccess}`);
        return hasAccess;
      } else if (typeof quiz.target_groups === 'string') {
        // Si c'est une cha√Æne, la traiter comme un tableau avec un seul √©l√©ment
        const hasAccess = quiz.target_groups === student.class_level;
        console.log(`üîç V√©rification cha√Æne: ${quiz.target_groups === student.class_level}`);
        console.log(`  target_groups: "${quiz.target_groups}"`);
        console.log(`  student.class_level: "${student.class_level}"`);
        console.log(`  R√©sultat: ${hasAccess}`);
        return hasAccess;
      }
      
      console.log(`‚ùå Format target_groups non reconnu`);
      return false;
    } catch (error) {
      console.error('Erreur lors de la v√©rification d\'acc√®s au quiz:', error);
      return false;
    }
  }

  /**
   * R√©cup√®re tous les quizzes accessibles √† un √©tudiant
   */
  async getAccessibleQuizzes(studentId: number): Promise<Quiz[]> {
    try {
      // R√©cup√©rer l'√©tudiant
      const student = await this.studentRepo.findOne({ where: { id: studentId } });
      if (!student) {
        return [];
      }

      // R√©cup√©rer tous les quizzes publi√©s
      const allQuizzes = await this.quizRepo.find({ 
        where: { status: 'Publi√©' },
        order: { created_at: 'DESC' }
      });

      // Filtrer les quizzes accessibles
      return allQuizzes.filter(quiz => {
        // Si aucun groupe cible, le quiz est accessible
        if (!quiz.target_groups || quiz.target_groups.length === 0) {
          return true;
        }
                 // Sinon, v√©rifier si l'√©tudiant appartient √† un des groupes cibles
        if (Array.isArray(quiz.target_groups)) {
          return quiz.target_groups.includes(student.class_level);
        } else if (typeof quiz.target_groups === 'string') {
          return quiz.target_groups === student.class_level;
        }
        return false;
      });
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des quizzes accessibles:', error);
      return [];
    }
  }

  /**
   * V√©rifie si un quiz est accessible √† un groupe sp√©cifique
   */
  async isQuizAccessibleToGroup(quizId: number, groupName: string): Promise<boolean> {
    try {
      const quiz = await this.quizRepo.findOne({ where: { id: quizId } });
      if (!quiz) {
        return false;
      }

      // Si aucun groupe cible, le quiz est accessible √† tous
      if (!quiz.target_groups || quiz.target_groups.length === 0) {
        return true;
      }

      // V√©rifier si le groupe est dans la liste des groupes cibles
      if (Array.isArray(quiz.target_groups)) {
        return quiz.target_groups.includes(groupName);
      } else if (typeof quiz.target_groups === 'string') {
        return quiz.target_groups === groupName;
      }
      return false;
    } catch (error) {
      console.error('Erreur lors de la v√©rification d\'acc√®s du groupe:', error);
      return false;
    }
  }

  /**
   * R√©cup√®re les statistiques d'acc√®s pour un quiz
   */
  async getQuizAccessStats(quizId: number): Promise<{
    totalStudents: number;
    accessibleStudents: number;
    accessibleGroups: string[];
  }> {
    try {
      const quiz = await this.quizRepo.findOne({ where: { id: quizId } });
      if (!quiz) {
        return { totalStudents: 0, accessibleStudents: 0, accessibleGroups: [] };
      }

      // Compter tous les √©tudiants
      const totalStudents = await this.studentRepo.count();

      if (!quiz.target_groups || quiz.target_groups.length === 0) {
        // Quiz accessible √† tous
        return {
          totalStudents,
          accessibleStudents: totalStudents,
          accessibleGroups: ['Tous les groupes']
        };
      }

             // Compter les √©tudiants des groupes cibles
       const accessibleStudents = await this.studentRepo.count({
         where: { class_level: In(quiz.target_groups) }
       });

      return {
        totalStudents,
        accessibleStudents,
        accessibleGroups: quiz.target_groups
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques d\'acc√®s:', error);
      return { totalStudents: 0, accessibleStudents: 0, accessibleGroups: [] };
    }
  }
}
