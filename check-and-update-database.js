const mysql = require('mysql2/promise');

async function checkAndUpdateDatabase() {
  let connection;
  
  try {
    // Configuration de la base de donn√©es
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '', // Ajoutez votre mot de passe si n√©cessaire
      database: 'chrono_carto'
    });

    console.log('Connexion √† la base de donn√©es √©tablie');

    // V√©rifier la structure actuelle de la table conversation
    console.log('\nüìã Structure actuelle de la table conversation:');
    const [columns] = await connection.execute('DESCRIBE conversation');
    columns.forEach(col => {
      console.log(`  - ${col.Field}: ${col.Type} ${col.Null === 'YES' ? 'NULL' : 'NOT NULL'}`);
    });

    // V√©rifier si les colonnes existent d√©j√†
    const existingColumns = columns.map(col => col.Field);
    const newColumns = ['type', 'title', 'participant1_id', 'participant2_id', 'class_level'];
    
    console.log('\nüîç V√©rification des colonnes √† ajouter:');
    for (const col of newColumns) {
      if (existingColumns.includes(col)) {
        console.log(`  ‚úì ${col} existe d√©j√†`);
      } else {
        console.log(`  ‚ùå ${col} manquante`);
      }
    }

    // Ajouter les colonnes manquantes
    console.log('\nüîß Ajout des colonnes manquantes:');
    
    if (!existingColumns.includes('type')) {
      await connection.execute('ALTER TABLE conversation ADD COLUMN type VARCHAR(50) DEFAULT "direct"');
      console.log('  ‚úì Colonne "type" ajout√©e');
    }
    
    if (!existingColumns.includes('title')) {
      await connection.execute('ALTER TABLE conversation ADD COLUMN title VARCHAR(255) NULL');
      console.log('  ‚úì Colonne "title" ajout√©e');
    }
    
    if (!existingColumns.includes('participant1_id')) {
      await connection.execute('ALTER TABLE conversation ADD COLUMN participant1_id INT NULL');
      console.log('  ‚úì Colonne "participant1_id" ajout√©e');
    }
    
    if (!existingColumns.includes('participant2_id')) {
      await connection.execute('ALTER TABLE conversation ADD COLUMN participant2_id INT NULL');
      console.log('  ‚úì Colonne "participant2_id" ajout√©e');
    }
    
    if (!existingColumns.includes('class_level')) {
      await connection.execute('ALTER TABLE conversation ADD COLUMN class_level VARCHAR(100) NULL');
      console.log('  ‚úì Colonne "class_level" ajout√©e');
    }

    // V√©rifier les cl√©s √©trang√®res existantes
    console.log('\nüîë V√©rification des cl√©s √©trang√®res:');
    const [foreignKeys] = await connection.execute(`
      SELECT CONSTRAINT_NAME, COLUMN_NAME 
      FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
      WHERE TABLE_SCHEMA = 'chrono_carto' 
      AND TABLE_NAME = 'conversation' 
      AND REFERENCED_TABLE_NAME IS NOT NULL
    `);
    
    const existingFKs = foreignKeys.map(fk => fk.COLUMN_NAME);
    console.log('  Cl√©s √©trang√®res existantes:', existingFKs);

    // Ajouter les cl√©s √©trang√®res manquantes
    if (!existingFKs.includes('participant1_id')) {
      try {
        await connection.execute(`
          ALTER TABLE conversation 
          ADD CONSTRAINT FK_conversation_participant1 
          FOREIGN KEY (participant1_id) REFERENCES users(id) ON DELETE CASCADE
        `);
        console.log('  ‚úì Cl√© √©trang√®re pour participant1_id ajout√©e');
      } catch (error) {
        console.log('  ‚ö†Ô∏è  Cl√© √©trang√®re pour participant1_id d√©j√† existante ou erreur:', error.message);
      }
    }
    
    if (!existingFKs.includes('participant2_id')) {
      try {
        await connection.execute(`
          ALTER TABLE conversation 
          ADD CONSTRAINT FK_conversation_participant2 
          FOREIGN KEY (participant2_id) REFERENCES users(id) ON DELETE CASCADE
        `);
        console.log('  ‚úì Cl√© √©trang√®re pour participant2_id ajout√©e');
      } catch (error) {
        console.log('  ‚ö†Ô∏è  Cl√© √©trang√®re pour participant2_id d√©j√† existante ou erreur:', error.message);
      }
    }

    // Supprimer la table conversation_participants si elle existe
    console.log('\nüóëÔ∏è  Suppression de la table conversation_participants:');
    try {
      await connection.execute('DROP TABLE IF EXISTS conversation_participants');
      console.log('  ‚úì Table conversation_participants supprim√©e (si elle existait)');
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Erreur lors de la suppression:', error.message);
    }

    console.log('\n‚úÖ Mise √† jour de la base de donn√©es termin√©e avec succ√®s');

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour de la base de donn√©es:', error.message);
  } finally {
    if (connection) {
      await connection.end();
      console.log('Connexion ferm√©e');
    }
  }
}

checkAndUpdateDatabase();
